import { ApolloServer } from "apollo-server-express";
import express from "express";
import session from "express-session";
import passport from "passport";
import typeDefs from "@koremo/graphql";
import resolvers from "./resolvers/index";
// import mysql from "mysql2";
import { DataSource } from "typeorm";
import dotenv from "dotenv";

import entities from "@koremo/entities";

import User from "./api/User";

dotenv.config();

const {
  PORT,
  SESSION_SECRET,
  MYSQL_HOST,
  MYSQL_USER,
  MYSQL_PASSWORD,
  MYSQL_DATABASE,
} = process.env;

// const connection = mysql.createConnection({
//   host: MYSQL_HOST,
//   user: MYSQL_USER,
//   password: MYSQL_PASSWORD,
//   database: MYSQL_DATABASE,
// });

// connection.connect((err) => {
//   if (err) {
//     console.error("error connecting: " + err.stack);
//     return;
//   }
//   console.log("connected as id " + connection.threadId);
// });

(async () => {
  const dataSource = new DataSource({ 
    type: "mysql",
    host: MYSQL_HOST,
    username: MYSQL_USER,
    password: MYSQL_PASSWORD,
    database: MYSQL_DATABASE,
    logging: true,
    // synchronize: true, // EntityとDBを同期(cliでsyncエラー出るので代わりにコメントアウトで対応)
    entities: Object.values(entities),
   });
  
   dataSource.initialize()
   .then(() => {
      console.log("Data Source has been initialized!")
   })
   .catch((err) => {
      console.error("Error during Data Source initialization", err)
   })

  passport.serializeUser((user: any /* とりまany */, done) => {
    done(null, user.id);
  });

  passport.deserializeUser((id, done) => {
    const users = User.getUsers();
    const matchingUser = users.find((user) => user.id === id);
    done(null, matchingUser); //これがreq.userになる done(第一引数はerr, 第二引数はuser)だから
  });

  const app = express();

  app.use(
    session({
      resave: false,
      saveUninitialized: false,
      secret: SESSION_SECRET as string,
      // genid: (req) => uuid(); default session id is generated by uid-safe
      // cookie: { secure: true } enable in production mode
      // session is stored to server memory by default, so it's removed when the server is restarted
    })
  );

  app.use(passport.initialize());
  app.use(passport.session());

  const server = new ApolloServer({
    typeDefs: await typeDefs,
    resolvers,
    context: ({ req }) => ({
      getUser: () => req.user,
      // logout: () => req.logout()
    }),
    csrfPrevention: true,
    cache: "bounded",
  });

  await server.start();

  server.applyMiddleware({ app });

  app.use("/", (_, res) => {
    res.send("AAA");
  });

  app.listen(PORT, () => {
    console.log(`App listening on port ${PORT}`);
  });
})();
